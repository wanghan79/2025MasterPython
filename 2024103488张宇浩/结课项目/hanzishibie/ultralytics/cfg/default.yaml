# Ultralytics 🚀 AGPL-3.0 许可证 - https://ultralytics.com/license

# YOLO全局配置文件，包含训练、验证、预测和导出的设置和超参数
# 文档参考 https://docs.ultralytics.com/usage/cfg/

task: detect # (str) YOLO任务类型，可选: detect(检测), segment(分割), classify(分类), pose(姿态), obb(定向边界框)
mode: train # (str) YOLO模式，可选: train(训练), val(验证), predict(预测), export(导出), track(跟踪), benchmark(基准测试)

# 训练设置 -------------------------------------------------------------------------------------------------------
model: # (str, 可选) 模型文件路径，
data: # (str, 可选) 数据文件路径，
epochs: 100 # (int) 训练的总epoch数
time: # (float, 可选) 训练小时数，如果设置会覆盖epochs
patience: 8 # (int) 早停等待的epoch数(当指标无改善时)
batch: 64 # (int) 每批图像数量
imgsz: 128 # (int | list) 输入图像尺寸，训练/验证时为int，预测/导出时为[h,w]列表
save: True # (bool) 是否保存训练检查点和预测结果
save_period: 20 # (int) 每x个epoch保存检查点(<1时禁用)
cache: True # (bool) 数据加载缓存方式: True/ram(内存), disk(磁盘)或False(禁用)
device: 0 # (int | str | list, 可选) 运行设备，如 cuda 设置device=0 或 多GPU device=0,1,2,3 或 device=cpu
workers: 32 # (int) 数据加载的工作线程数(使用DDP时为每个RANK的线程数)
project:  # (str, 可选) 项目名称
name: # (str, 可选) 实验名称，结果保存到'project/name'目录
exist_ok: False # (bool) 是否覆盖已有实验
pretrained: True # (bool | str) 是否使用预训练模型(bool)或指定权重路径(str)
optimizer: AdamW # (str) 优化器类型，可选: [SGD, Adam, Adamax, AdamW, NAdam, RAdam, RMSProp, auto]
verbose: True # (bool) 是否打印详细输出
seed: 0 # (int) 随机种子(确保可复现性)
deterministic: True # (bool) 是否启用确定性模式
single_cls: False # (bool) 将多类数据作为单类训练
rect: False # (bool) 矩形训练(模式='train')或矩形验证(模式='val')
cos_lr: False # (bool) 使用余弦学习率调度器
close_mosaic: 24 # (int) 最后x个epoch禁用马赛克增强(0表示不禁用)
resume: false # (bool) 从上次检查点恢复训练
amp: True # (bool) 自动混合精度(AMP)训练，True会运行AMP检查
fraction: 1.0 # (float) 训练使用的数据集比例(1.0表示全部)
profile: False # (bool) 在训练期间分析ONNX和TensorRT速度(用于日志记录)
freeze: None # (int | list, 可选) 冻结前n层或指定层索引列表
multi_scale: False # (bool) 是否在训练期间使用多尺度
# 分割任务设置
overlap_mask: True # (bool) 训练时将对象掩码合并为单个图像掩码(仅分割训练)
mask_ratio: 4 # (int) 掩码下采样比例(仅分割训练)
# 分类任务设置
dropout: 0.5 # (float) 使用dropout正则化(仅分类训练)

# 验证/测试设置 ----------------------------------------------------------------------------------------------------
val: True # (bool) 训练期间是否进行验证/测试
split: val # (str) 用于验证的数据集划分，可选: 'val', 'test' 或 'train'
save_json: True # (bool) 是否将结果保存为JSON文件
save_hybrid: False # (bool) 是否保存混合版本的标签(原始标签+额外预测)
conf:  # (float, 可选) 检测的置信度阈值(预测默认为0.25，验证默认为0.001)
iou: 0.7 # (float) NMS的IoU阈值
max_det: 300 # (int) 每张图像的最大检测数
half: true # (bool) 是否使用半精度(FP16)
dnn: False # (bool) 是否使用OpenCV DNN进行ONNX推理
plots: True # (bool) 训练/验证期间是否保存图表和图像

# 预测设置 -----------------------------------------------------------------------------------------------------
source: # (str, 可选) 图像或视频的源目录
vid_stride: 1 # (int) 视频帧率步长
stream_buffer: False # (bool) 缓冲所有流帧(True)或只返回最新帧(False)
visualize: False # (bool) 是否可视化模型特征
augment: False # (bool) 是否对预测源应用图像增强
agnostic_nms: False # (bool) 是否使用类别无关的NMS
classes: # (int | list[int], 可选) 按类别过滤结果，如 classes=0 或 classes=[0,2,3]
retina_masks: False # (bool) 是否使用高分辨率分割掩码
embed: # (list[int], 可选) 从指定层返回特征向量/嵌入

# 可视化设置 ---------------------------------------------------------------------------------------------------
show: False # (bool) 如果环境允许，是否显示预测的图像和视频
save_frames: False # (bool) 是否保存预测的单个视频帧
save_txt: True # (bool) 是否将结果保存为.txt文件
save_conf: True # (bool) 是否保存带置信度的结果
save_crop: False # (bool) 是否保存带结果的裁剪图像
show_labels: false # (bool) 是否显示预测标签，如'person'
show_conf: True # (bool) 是否显示预测置信度，如'0.99'
show_boxes: True # (bool) 是否显示预测框
line_width: # (int, 可选) 边界框线宽。如果为None则根据图像尺寸缩放。

# 导出设置 ------------------------------------------------------------------------------------------------------
format: torchscript # (str) 导出格式，选项见 https://docs.ultralytics.com/modes/export/#export-formats
keras: False # (bool) 是否使用Keras
optimize: False # (bool) TorchScript: 是否为移动端优化
int8: False # (bool) CoreML/TF: INT8量化
dynamic: False # (bool) ONNX/TF/TensorRT: 动态轴
simplify: True # (bool) ONNX: 使用`onnxslim`简化模型
opset: # (int, 可选) ONNX: opset版本
workspace: 1 # (float, 可选) TensorRT: 工作空间大小(GiB)，`None`表示让TensorRT自动分配
nms: False # (bool) CoreML: 是否添加NMS

# 超参数设置 ------------------------------------------------------------------------------------------------------
lr0: 0.001 # (float) 初始学习率(如SGD=1E-2, Adam=1E-3)
lrf: 0.01 # (float) 最终学习率(lr0 * lrf)
momentum: 0.937 # (float) SGD动量/Adam beta1
weight_decay: 0.00075 # (float) 优化器权重衰减
warmup_epochs: 5.0 # (float) 预热epoch数(可为小数)
warmup_momentum: 0.8 # (float) 预热初始动量
warmup_bias_lr: 0.1 # (float) 预热初始偏置学习率
box: 7.5 # (float) 边界框损失权重
cls: 0.5 # (float) 分类损失权重(与像素缩放)
dfl: 1.5 # (float) DFL损失权重
pose: 12.0 # (float) 姿态损失权重
kobj: 1.0 # (float) 关键点对象损失权重
nbs: 64 # (int) 标称批大小
hsv_h: 0.015 # (float) 图像HSV色调增强(比例)
hsv_s: 0.7 # (float) 图像HSV饱和度增强(比例)
hsv_v: 0.4 # (float) 图像HSV明度增强(比例)
degrees: 5.0 # (float) 图像旋转的角度
translate: 0.1 # (float) 图像平移范围(+/- 比例)
scale: 0.25 # (float) 图像缩放比例(+/- 增益)
shear: 0 # (float) 图像剪切角度(+/- 度)
perspective: 0 # (float) 图像透视变换比例(+/- 比例), 范围0-0.001
flipud: 0.0 # (float) 图像上下翻转概率
fliplr: 0.0 # (float) 图像左右翻转概率
bgr: 0.0 # (float) 图像BGR通道转换概率
mosaic: 0.24 # (float) 图像马赛克增强概率
mixup: 0.0 # (float) 图像混合增强概率
copy_paste: 0.0 # (float) 分割复制粘贴增强概率
copy_paste_mode: "flip" # (str) 执行copy_paste增强的方法(flip, mixup)
auto_augment: randaugment # (str) 分类任务的自动增强策略(randaugment, autoaugment, augmix)
erasing: 0.4 # (float) 分类训练中随机擦除的概率(0-0.9), 0表示不擦除, 必须小于1.0
crop_fraction: 1.0 # (float) 分类任务的图像裁剪比例(0.1-1), 1.0表示不裁剪, 必须大于0

# Custom config.yaml ---------------------------------------------------------------------------------------------------
cfg: # (str, 可选) 用于覆盖defaults.yaml的配置文件路径

# Tracker settings ------------------------------------------------------------------------------------------------------
tracker: botsort.yaml # (str) 跟踪器类型, 可选=[botsort.yaml, bytetrack.yaml]
