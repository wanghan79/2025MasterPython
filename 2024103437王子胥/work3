import random
import string
from datetime import date, timedelta
import math
from typing import Any, Dict, Callable, List


# ========= 核心：带参数的修饰器 =========
def stats_decorator(*metrics):
    def decorator(func: Callable):
        def wrapper(*args, **kwargs):
            data = func(*args, **kwargs)
            numeric_values = extract_numeric_values(data)
            results = {}
            if not numeric_values:
                return data, results

            if 'SUM' in metrics:
                results['SUM'] = sum(numeric_values)
            if 'AVG' in metrics:
                results['AVG'] = sum(numeric_values) / len(numeric_values)
            if 'VAR' in metrics:
                mean = sum(numeric_values) / len(numeric_values)
                results['VAR'] = sum((x - mean) ** 2 for x in numeric_values) / len(numeric_values)
            if 'RMSE' in metrics:
                mean = sum(numeric_values) / len(numeric_values)
                var = sum((x - mean) ** 2 for x in numeric_values) / len(numeric_values)
                results['RMSE'] = math.sqrt(var)

            return data, results
        return wrapper
    return decorator


# ========= 提取结构中所有数值型字段 =========
def extract_numeric_values(data: Any) -> List[float]:
    numbers = []
    if isinstance(data, dict):
        for v in data.values():
            numbers.extend(extract_numeric_values(v))
    elif isinstance(data, (list, tuple)):
        for item in data:
            numbers.extend(extract_numeric_values(item))
    elif isinstance(data, (int, float)):
        numbers.append(data)
    return numbers


# ========= 随机值生成器 =========
def generate_random_value(spec: Dict[str, Any]):
    dtype = spec.get('type')
    rule = spec.get('rule')

    if dtype == 'int':
        return random.randint(*rule)
    elif dtype == 'float':
        return round(random.uniform(*rule), 2)
    elif dtype == 'str':
        length = rule
        return ''.join(random.choices(string.ascii_letters, k=length))
    elif dtype == 'bool':
        return random.choice([True, False])
    elif dtype == 'date':
        start, end = rule
        delta = (end - start).days
        return str(start + timedelta(days=random.randint(0, delta)))
    elif dtype == 'list':
        return [generate_random_value(spec['item']) for _ in range(spec.get('length', 3))]
    elif dtype == 'tuple':
        return tuple(generate_random_value(item) for item in spec.get('items', []))
    elif dtype == 'dict':
        return {k: generate_random_value(v) for k, v in spec.get('fields', {}).items()}
    else:
        return None


# ========= 数据生成函数 =========
def generate_samples(structure: Dict[str, Any], num: int = 3) -> List[Dict[str, Any]]:
    return [generate_random_value({'type': 'dict', 'fields': structure}) for _ in range(num)]


# ========= 分析函数 + 装饰器绑定 =========
@stats_decorator('SUM', 'AVG', 'VAR', 'RMSE')
def analyze(samples: List[Dict[str, Any]]):
    return samples



if __name__ == "__main__":
    schema = {
        'id': {'type': 'int', 'rule': (1000, 9999)},
        'price': {'type': 'float', 'rule': (10.0, 500.0)},
        'name': {'type': 'str', 'rule': 6},
        'available': {'type': 'bool'},
        'created': {'type': 'date', 'rule': [date(2021, 1, 1), date(2024, 12, 31)]},
        'meta': {
            'type': 'dict',
            'fields': {
                'rating': {'type': 'float', 'rule': (1.0, 5.0)},
                'tags': {'type': 'list', 'item': {'type': 'str', 'rule': 4}, 'length': 3},
                'dimensions': {
                    'type': 'tuple',
                    'items': [
                        {'type': 'int', 'rule': (10, 20)},
                        {'type': 'int', 'rule': (5, 15)},
                        {'type': 'float', 'rule': (0.5, 2.0)}
                    ]
                }
            }
        }
    }

    # 生成数据并统计
    sample_data = generate_samples(schema, num=3)
    analyzed_data, stats = analyze(sample_data)

    # 输出结果
    print("生成的结构化数据样本：\n")
    for i, item in enumerate(analyzed_data, 1):
        print(f"样本 {i}: {item}\n")

    print("数值型数据统计分析结果：")
    print(stats)
