import random
import string
from datetime import date, timedelta

def generate_random_sample(structure, max_depth=5, current_depth=0):
   
    if current_depth > max_depth:
        return generate_primitive_value('str')  # 防止无限递归
    
    if isinstance(structure, dict):
        if 'type' not in structure:
            raise ValueError("结构字典必须包含'type'键")
        
        data_type = structure['type']
        
        if data_type == 'dict':
            keys = structure.get('keys', {})
            return {k: generate_random_sample(v, max_depth, current_depth + 1) for k, v in keys.items()}
        
        elif data_type == 'list':
            item_structure = structure.get('items', {'type': 'str'})
            min_len = structure.get('min_length', 1)
            max_len = structure.get('max_length', 5)
            length = random.randint(min_len, max_len)
            return [generate_random_sample(item_structure, max_depth, current_depth + 1) for _ in range(length)]
        
        elif data_type == 'tuple':
            item_structure = structure.get('items', {'type': 'str'})
            min_len = structure.get('min_length', 1)
            max_len = structure.get('max_length', 5)
            length = random.randint(min_len, max_len)
            return tuple(generate_random_sample(item_structure, max_depth, current_depth + 1) for _ in range(length))
        
        else:
            return generate_primitive_value(data_type, **structure.get('params', {}))
    
    elif isinstance(structure, list):
        # 列表结构表示允许的类型选择
        chosen_type = random.choice(structure)
        return generate_random_sample(chosen_type, max_depth, current_depth)
    
    else:
        raise ValueError("结构必须是字典或列表")

def generate_primitive_value(data_type, **kwargs):
    """生成基本数据类型的随机值"""
    if data_type == 'int':
        min_val = kwargs.get('min', 0)
        max_val = kwargs.get('max', 100)
        return random.randint(min_val, max_val)
    
    elif data_type == 'float':
        min_val = kwargs.get('min', 0.0)
        max_val = kwargs.get('max', 1.0)
        precision = kwargs.get('precision', 2)
        return round(random.uniform(min_val, max_val), precision)
    
    elif data_type == 'str':
        length = kwargs.get('length', random.randint(5, 15))
        charset = kwargs.get('charset', string.ascii_letters + string.digits)
        return ''.join(random.choice(charset) for _ in range(length))
    
    elif data_type == 'bool':
        return random.choice([True, False])
    
    elif data_type == 'date':
        start_date = kwargs.get('start', date(2000, 1, 1))
        end_date = kwargs.get('end', date.today())
        delta = end_date - start_date
        random_days = random.randint(0, delta.days)
        return start_date + timedelta(days=random_days)
    
    else:
        raise ValueError(f"不支持的数据类型: {data_type}")

def generate_samples(structure, num_samples=1, max_depth=5):
   
    return [generate_random_sample(structure, max_depth) for _ in range(num_samples)]

# 示例用法
if __name__ == "__main__":
    # 定义复杂结构
    user_structure = {
        'type': 'dict',
        'keys': {
            'id': {'type': 'int'},
            'name': {'type': 'str'},
            'age': {'type': 'int', 'params': {'min': 18, 'max': 99}},
            'is_active': {'type': 'bool'},
            'created_at': {'type': 'date'},
            'hobbies': {
                'type': 'list',
                'items': {'type': 'str'},
                'min_length': 2,
                'max_length': 5
            },
            'address': {
                'type': 'dict',
                'keys': {
                    'street': {'type': 'str'},
                    'city': {'type': 'str'},
                    'zipcode': {'type': 'str', 'params': {'length': 5, 'charset': string.digits}}
                }
            }
        }
    }
    
    # 生成样本
    samples = generate_samples(user_structure, num_samples=3)
    
    # 打印样本
    for i, sample in enumerate(samples, 1):
        print(f"样本 {i}:")
        print(sample)
        print("-" * 50)    
